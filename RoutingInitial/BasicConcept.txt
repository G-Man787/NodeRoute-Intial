

Serverside basic concept:
Basic-1
The event loop is what allows Node.js to perform non-blocking I/O operations — 
despite the fact that JavaScript is single-threaded — by offloading operations to the system kernel whenever possible.
Timers:this phase executes callbacks scheduled by setTimeout() and setInterval(). pending callbacks:
executes I/O callbacks deferred to the next loop iteration. idle, prepare: only used internally. 
poll:retrieve new I/O events; execute I/O related callbacks (almost all with the exception of close callbacks,
the ones scheduled by timers, and setImmediate()); 
node will block here when appropriate. check: setImmediate() callbacks are invoked here. 
close callbacks: some close callbacks, e.g. socket.on('close', ...).

Basic-2
The difference between process.nextTick() and setImmediate() is that process.nextTick() defers
the execution of an action till the next pass around the event loop or it simply calls the callback function 
once the ongoing execution of the event loop is finished 
whereas setImmediate() executes a callback on the next cycle of the event loop 
and it gives back to the event loop for executing any I/O operations.

Basic-3

Core Modules
http=module includes classes, methods and events to create Node.js http server. 
url=module includes methods for URL resolution and parsing. 
querystring=module includes methods to deal with query string. 
path=module includes methods to deal with file paths. 
fs=module includes classes, methods, and events to work with file I/O. 
util=module includes utility functions useful for programmers.

Globale object Class:
Buffer 
_dirname 
_filename 
Events 
exports 
clearImmediate(immediateObject) 
clearInterval(intervalObject) 
clearTimeout(timeoutObject) 
console
